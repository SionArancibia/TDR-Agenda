generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(cuid())
  rut                  String         @unique
  firstName            String
  lastName             String
  address              String
  age                  Int
  password             String
  email                String         @unique // Nuevo campo de email
  phoneNumber          Int
  createAt             DateTime       @default(now())
  gender               Gender
  role                 Role
  messages             Message[] // Relación de uno a muchos con mensajes.
  professional         Professional? // Relación opcional si el usuario es un profesional.
  administrator        Administrator? // Relación opcional si el usuario es un administrador.
  patient              Patient? // Relación opcional si el usuario es un paciente.
  passwordResetToken   String?
  passwordResetExpires DateTime?
}

model Administrator {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id])
  validatedRequests Request[] // Relación de uno a muchos con las solicitudes que ha validado.
}

model Professional {
  id           String        @id @default(cuid())
  area         String
  specialty    String
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id])
  appointments Appointment[] // Relación con las citas.
  requests     Request[] // Relación opcional con solicitudes. Un profesional puede tener 0 o muchas solicitudes.
  ProfessionalBlocks ProfessionalBlock[]
}

model ProfessionalBlock {
  id             String   @id @default(uuid())
  startDate      DateTime
  endDate        DateTime
  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String
  reason         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Patient {
  id               String        @id @default(cuid())
  attendanceRecord String
  reducedMobility  Boolean
  medicalRecord    String
  userId           String        @unique
  user             User          @relation(fields: [userId], references: [id])
  appointments     Appointment[] // Relación con las citas.
  requests         Request[] // Relación opcional con solicitudes. Un paciente puede tener 0 o muchas solicitudes.
}

model Appointment {
  id                 String          @id @default(cuid())
  date               DateTime
  attended           Boolean
  observations       String?
  homeCare           Boolean
  available          Boolean
  canceled           Boolean         @default(false)
  cancellationReason String?
  patientId          String
  patient            Patient         @relation(fields: [patientId], references: [id])
  professionalId     String
  professional       Professional    @relation(fields: [professionalId], references: [id])
  serviceId      String
  service        Service     @relation(fields: [serviceId], references: [id])
  communityCenterId  String
  communityCenter    CommunityCenter @relation(fields: [communityCenterId], references: [id])
  log                Log?
}

model Log {
  id            String      @id @default(cuid())
  change        String
  createAt      DateTime    @default(now())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
}

model Request {
  id                 String         @id @default(cuid())
  requestType        RequestType    // Tipo de solicitud definido por el enum
  validated          Boolean        @default(false) // El campo `validated` ahora es Boolean y no referencia a `Administrator`.
  patientId          String?
  patient            Patient?       @relation(fields: [patientId], references: [id])
  professionalId     String?
  professional       Professional?  @relation(fields: [professionalId], references: [id])
  validatedByAdminId String? // Campo para identificar el administrador que validó la solicitud.
  validatedByAdmin   Administrator? @relation(fields: [validatedByAdminId], references: [id]) // Relación opcional con `Administrator`.
  RegistrationRequest RegistrationRequest[]
}

model RegistrationRequest {
  id        String  @id @default(cuid())
  rut       String  // RUT del usuario que se desea registrar
  password  String  // Contraseña del usuario
  document  String  // URL del PDF con el documento de respaldo
  requestId String  @unique
  request   Request @relation(fields: [requestId], references: [id])

  createdAt DateTime @default(now())
}

model CommunityCenter {
  id              String        @id @default(cuid())
  name String
  address String
  phoneNumber String
  managerName String
  appointments    Appointment[] // Relación con las citas.
}

model Service {
  id            String        @id @default(cuid())
  name          String        // Nombre del servicio (ej: Fisioterapia, Consulta Médica)
  description   String       
  category      String        // Categoría del servicio (ej: Estetica, Medicina)
  isActive      Boolean       @default(true) // Estado del servicio
  createdAt     DateTime      @default(now()) // Fecha de creación
  updatedAt     DateTime      @updatedAt // Fecha de última actualización
  appointments  Appointment[] // Relación con las citas
}

model Message {
  id       String   @id @default(cuid())
  content  String
  createAt DateTime @default(now())
  sent     Boolean // Campo que indica si el mensaje fue enviado (true) o recibido (false).
  userId   String // ID del usuario relacionado con el mensaje.
  user     User     @relation(fields: [userId], references: [id])
  read     Boolean  @default(false) // Indica si el mensaje ha sido leído.
}

enum Gender {
  male
  female
}

enum Role {
  admin
  professional
  patient
}

enum RequestType {
  REGISTRATION_REQUEST
  BLOCK_SCHEDULE_REQUEST
}
