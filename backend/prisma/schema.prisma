generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id         String   @id @default(cuid()) //cuid() es una función que genera un identificador único, es decir, un identificador único universal (UUID), para cada registro en la base de datos.
  rut        String   @unique // El rut es único
  username   String   @unique // El username es único 
  nombres    String
  apellidos  String
  domicilio  String
  edad       Int
  contrasena String
  telefono   Int
  gender     Gender // Gender es un enum que definimos más abajo
  createAt   DateTime @default(now())
  role       Role     @default(patient) // Role es un enum que definimos más abajo
}

model Administrador {
  id_Administrador     String  @id @default(cuid()) //cuid() es una función que genera un identificador único, es decir, un identificador único universal (UUID), para cada registro en la base de datos.
  rut                  String  @unique
  mensajes             String
  bloquear_agenda      Boolean
  registro_profesional String
}

model Profesional {
  id        String     @id @default(cuid())
  nombre    String
  rut       String
  pacientes Paciente[] // Relación de uno a muchos, un profesional puede tener muchas 
  citas     Citas[] // Relación de uno a muchos, un profesional puede tener muchas citas
}

model Paciente {
  id            String      @id @default(cuid())
  nombre        String
  rut           String
  citas         Citas[]    
  profesional   Profesional @relation(fields: [profesionalId], references: [id])
  profesionalId String
}

model Citas {
  id                   String      @id @default(cuid()) //cuid() es una función que genera un identificador único, es decir, un identificador único universal (UUID), para cada registro en la base de datos.
  pacienteId           String
  paciente             Paciente    @relation(fields: [pacienteId], references: [id]) //Relación de uno a muchos, un paciente puede tener muchas citas
  profesionalId        String
  profesional          Profesional @relation(fields: [profesionalId], references: [id]) //Relación de uno a muchos, un profesional puede tener muchas citas
  fecha                DateTime
  tipoServicio         String
  centroComunitario    String
  asiste               Boolean
  atencionDomiciliaria Boolean
  observaciones        String
}

enum Gender {
  male
  female
}

enum Role {
  admin
  professional
  patient
}
